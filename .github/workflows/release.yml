name: Release Workflow

on:
  repository_dispatch:
    types: [release]

env:
  RELEASE_TYPE: ${{ github.event.client_payload.release_type }}
  WORKFLOW_VERSION: ${{ github.event.client_payload.workflow_version }}
  SWIFT_CHANGELOG: ${{ github.event.client_payload.swift_changelog }}
  KOTLIN_CHANGELOG: ${{ github.event.client_payload.kotlin_changelog }}
  PUBLISH_SWIFT: ${{ github.event.client_payload.publish_swift }}
  PUBLISH_KOTLIN: ${{ github.event.client_payload.publish_kotlin }}
  PREFIX_FOR_TEST: 'test/' # Will be removed once live

jobs:
  bump-master:
    runs-on: macos-latest

    steps:
    - name: Calculate Release Branch
      run: |
        MAJOR=$(cut -d'.' -f1 <<<'${{ env.WORKFLOW_VERSION }}')
        MINOR=$(cut -d'.' -f2 <<<'${{ env.WORKFLOW_VERSION }}')
        echo "::set-env name=RELEASE_BRANCH::${{ env.PREFIX_FOR_TEST }}release-v$MAJOR.$MINOR.x"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Checkout Master
      uses: actions/checkout@v2
      with:
        ref: ${{ env.PREFIX_FOR_TEST }}master
        path: master

    - name: Setup Release Branch (major, minor)
      if: env.RELEASE_TYPE == 'major' || env.RELEASE_TYPE == 'minor'
      run: |
        cp -R master release
        cd release
        git checkout -b ${{ env.RELEASE_BRANCH }}

    - name: Setup Release Branch (patch)
      if: env.RELEASE_TYPE == 'patch'
      uses: actions/checkout@v2
      with:
        ref: ${{ env.RELEASE_BRANCH }}
        path: release

    - name: Update Changelog
      run: |
        cd master
        ../.buildscript/update_changelog.swift
        cd ../release
        ../.buildscript/update_changelog.swift

    - name: Update Master Version (major, minor)
      if: env.RELEASE_TYPE == 'major' || env.RELEASE_TYPE == 'minor'
      run: |
        cd master
        sed -i '' -e 's/VERSION_NAME=\(.*\)-SNAPSHOT/VERSION_NAME=${{ env.WORKFLOW_VERSION }}-SNAPSHOT/g' kotlin/gradle.properties
        ls Workflow*.podspec | xargs sed -i '' -e "s/ s.version\( *=\).*/ s.version\1 '${{ env.WORKFLOW_VERSION }}'/"

    - name: Push changes to master
      env:
        GIT_USERNAME: ${{ github.actor }}
        GIT_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd master
        git add -A . && git commit -m "Releasing ${{ env.WORKFLOW_VERSION }}" && git push -f

    - name: Push Release Branch
      run: |
        cd release
        sed -i '' -e 's/VERSION_NAME=\(.*\)-SNAPSHOT/VERSION_NAME=${{ env.WORKFLOW_VERSION }}/g' kotlin/gradle.properties
        sed -i '' -e 's/VERSION_NAME=\(.*\)/VERSION_NAME=${{ env.WORKFLOW_VERSION }}/g' kotlin/gradle.properties
        ls Workflow*.podspec | xargs sed -i '' -e "s/ s.version\( *=\).*/ s.version\1 '${{ env.WORKFLOW_VERSION }}'/"
        git add -A .; git commit -m "Releasing ${{ env.WORKFLOW_VERSION }}"
        git tag ${{ env.PREFIX_FOR_TEST }}v${{ env.WORKFLOW_VERSION }}
        git push origin ${{ env.RELEASE_BRANCH }} ${{ env.PREFIX_FOR_TEST }}v${{ env.WORKFLOW_VERSION }}

    - name: Upload Kotlin Artifacts
      if: env.PUBLISH_KOTLIN == 'true'
      run: |
        echo "TODO: Publish Kotlin Artifacts"

    - name: Push to Cocoapods
      if: env.PUBLISH_SWIFT == 'true'
      run: |
        echo "TODO: Push to Cocoapods"

      # Publish Documentation
      # Gradle caches (keys must match those defined in kotlin.yml)
      # Don't use the gradle wrapper cache, since there's only one job we're downloading the whole wrapper once either way.
    - name: Cache gradle artifacts
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/buildSrc/**') }}-${{ github.sha }}
        restore-keys: |
          gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}-

    # Swift caches (keys must match those defined in swift.yml)
    - name: Load gem cache
      uses: actions/cache@v1
      with:
        path: release/.bundle
        key: gems-${{ hashFiles('Gemfile.lock') }}

    - name: Set up Swift environment
      with:
        path: release
      run: |
        # Set global bundle path so it gets used by build_swift_docs.sh running in the nested repo as well.
        bundle config --global path "$(pwd)/.bundle"
        bundle check || bundle install
        # Don't need to run pod gen, the website script does that itself.
        brew install sourcedocs
        sudo xcode-select -s /Applications/Xcode_11.4.app

    # Docs dependencies
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.6

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # This environment variable step should be run after all 3rd-party actions to ensure nothing
    # else accidentally overrides any of our special variables.
    - name: 'If in test-mode: enable dry run'
      if: env.PREFIX_FOR_TEST != ''
      run: |
        # When PREFIX_FOR_TEST is not empty, we shouldn't actually deploy, just do a dry run to make
        # sure all the dependencies are set up correctly.
        echo "::set-env name=DRY_RUN::true"

    - name: Debug info
      with:
        path: release
      run: |
        echo event_name=${{ github.event_name }}
        echo GITHUB_REF=$GITHUB_REF
        echo GITHUB_HEAD_REF=$GITHUB_HEAD_REF
        echo DRY_RUN=$DRY_RUN
        git remote -v

      ## Main steps
    - name: Build and deploy website
      with:
        path: release
      env:
        WORKFLOW_GOOGLE_ANALYTICS_KEY: ${{ secrets.WORKFLOW_GOOGLE_ANALYTICS_KEY }}
        GIT_USERNAME: ${{ github.actor }}
        GIT_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: ./deploy_website.sh ${{ env.PREFIX_FOR_TEST }}v${{ env.WORKFLOW_VERSION }}


    - name: Create Github Release
      run: |
        echo "TODO: Create Github Release"


